#
# modified lcc 4.2 Windows makefile 
#   - for use with nmake
#   - tested on XP Pro 32 bit with Visual C++ 2005 ( aka VS8 )
#
# - currently works to build lcc cross-compilers emitting asembly sources
# - native x86 applications fail due to library/include issues processing VS8 headers
#
#
# Example usage:
#   nmake -f makefile.xp all
#

HOSTFILE=src/etc/win32.c

#
# TARGETNAME is used for for testing
#
#TARGETNAME=x86\win32
#TARGETNAME=mips\irix
#TARGETNAME=sparc\solaris
TARGETNAME=alpha\osf
#TARGETNAME=yard\y1a

TARGET=targets\$(TARGETNAME)

#
#
#
TEMPDIR=\\temp
TSTDIR=$(LCCBUILDDIR)\$(TARGET)\tst

#
#
#
A=.lib
O=.obj
E=.exe

#
#
#
CC=cl -nologo
CFLAGS=-DWIN32 -Zi -MTd -Fd$(LCCBUILDDIR)^\

LD=cl -nologo
LDFLAGS=-Zi -MTd -Fd$(LCCBUILDDIR)^\

#
#
#
B=$(LCCBUILDDIR)^\
T=$(TSTDIR)^\
C=$Blcc -Wo-lccdir=$(LCCBUILDDIR) -Wf-target=$(TARGETNAME) -I$(TARGET)\include

#
#
#
what:
	-@echo make all rcc lburg cpp lcc bprint liblcc triple clean clobber

all::	rcc lburg cpp lcc bprint liblcc

rcc:	$Brcc$E
lburg:	$Blburg$E
cpp:	$Bcpp$E
lcc:	$Blcc$E
bprint:	$Bbprint$E
ops:	$Bops$E
liblcc:	$Bliblcc$A

RCCOBJS=$Balloc$O \
	$Bbind$O \
	$Bdag$O \
	$Bdagcheck$O \
	$Bdecl$O \
	$Benode$O \
	$Berror$O \
	$Bexpr$O \
	$Bevent$O \
	$Binit$O \
	$Binits$O \
	$Binput$O \
	$Blex$O \
	$Blist$O \
	$Bmain$O \
	$Boutput$O \
	$Bprof$O \
	$Bprofio$O \
	$Bsimp$O \
	$Bstmt$O \
	$Bstring$O \
	$Bsym$O \
	$Btrace$O \
	$Btree$O \
	$Btypes$O \
	$Bnull$O \
	$Bsymbolic$O \
	$Bgen$O \
	$Bbytecode$O \
	$Balpha$O \
	$Barm$O \
	$Bmips$O \
	$Bsparc$O \
	$Byard$O \
	$Bstab$O \
	$Bx86$O \
	$Bx86linux$O

$Brcc$E::	$Bmain$O $Blibrcc$A $(EXTRAOBJS)
		$(LD) $(LDFLAGS) -Fe$@ $Bmain$O $(EXTRAOBJS) $Blibrcc$A $(EXTRALIBS)

$Blibrcc$A:	$(RCCOBJS)
		lib -out:$@ $(RCCOBJS)

$(RCCOBJS):	src/rcc/c.h src/rcc/ops.h src/rcc/token.h src/rcc/config.h

$Balloc$O:	src/rcc/alloc.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/alloc.c
$Bbind$O:	src/rcc/bind.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/bind.c
$Bdag$O:	src/rcc/dag.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/dag.c
$Bdecl$O:	src/rcc/decl.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/decl.c
$Benode$O:	src/rcc/enode.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/enode.c
$Berror$O:	src/rcc/error.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/error.c
$Bevent$O:	src/rcc/event.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/event.c
$Bexpr$O:	src/rcc/expr.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/expr.c
$Bgen$O:	src/rcc/gen.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/gen.c
$Binit$O:	src/rcc/init.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/init.c
$Binits$O:	src/rcc/inits.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/inits.c
$Binput$O:	src/rcc/input.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/input.c
$Blex$O:	src/rcc/lex.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/lex.c
$Blist$O:	src/rcc/list.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/list.c
$Bmain$O:	src/rcc/main.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/main.c
$Bnull$O:	src/rcc/null.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/null.c
$Boutput$O:	src/rcc/output.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/output.c
$Bprof$O:	src/rcc/prof.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/prof.c
$Bprofio$O:	src/rcc/profio.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/profio.c
$Bsimp$O:	src/rcc/simp.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/simp.c
$Bstmt$O:	src/rcc/stmt.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/stmt.c
$Bstring$O:	src/rcc/string.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/string.c
$Bsym$O:	src/rcc/sym.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/sym.c
$Btrace$O:	src/rcc/trace.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/trace.c
$Btree$O:	src/rcc/tree.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/tree.c
$Btypes$O:	src/rcc/types.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/types.c
$Bstab$O:	src/rcc/stab.c src/rcc/stab.h;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/rcc/stab.c

$Bsymbolic$O:	targets/symbolic/src/symbolic.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ targets/symbolic/src/symbolic.c
$Bbytecode$O:	targets/bytecode/src/bytecode.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ targets/bytecode/src/bytecode.c

$Balpha$O:	$Balpha.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ $Balpha.c
$Barm$O:	$Barm.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ $Barm.c
$Bdagcheck$O:	$Bdagcheck.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ $Bdagcheck.c
$Bmips$O:	$Bmips.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ $Bmips.c
$Bsparc$O:	$Bsparc.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ $Bsparc.c
$Byard$O:	$Byard.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ $Byard.c
$Bx86$O:	$Bx86.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ $Bx86.c
$Bx86linux$O:	$Bx86linux.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ $Bx86linux.c

#
# md files
#
$Balpha.c:	$Blburg$E targets/alpha/src/alpha.md;    $Blburg targets/alpha/src/alpha.md    $@
$Barm.c:	$Blburg$E targets/arm/src/arm.md;    $Blburg targets/arm/src/arm.md    $@
$Bdagcheck.c:	$Blburg$E targets/dagcheck/src/dagcheck.md; $Blburg targets/dagcheck/src/dagcheck.md $@
$Bmips.c:	$Blburg$E targets/mips/src/mips.md;     $Blburg targets/mips/src/mips.md     $@
$Bsparc.c:	$Blburg$E targets/sparc/src/sparc.md;    $Blburg targets/sparc/src/sparc.md    $@
$Bx86.c:	$Blburg$E targets/x86/src/x86.md;      $Blburg targets/x86/src/x86.md      $@
$Bx86linux.c:	$Blburg$E targets/x86/src/x86linux.md; $Blburg targets/x86/src/x86linux.md $@
$Byard.c:	$Blburg$E targets/yard/src/yard.md;    $Blburg targets/yard/src/yard.md    $@


#
#
#
$Bbprint$E:	$Bbprint$O;	$(LD) $(LDFLAGS) -Fe$@ $Bbprint$O 
$Bops$E:	$Bops$O;	$(LD) $(LDFLAGS) -Fe$@ $Bops$O

$Bbprint$O:	src/etc/bprint.c src/rcc/profio.c;	$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/etc/bprint.c
$Bops$O:	src/etc/ops.c src/rcc/ops.h;		$(CC) $(CFLAGS) -c -Isrc/rcc -Fo$@ src/etc/ops.c

$Blcc$E:	$Blcc$O $Bhost$O;	$(LD) $(LDFLAGS) -Fe$@ $Blcc$O $Bhost$O 

$Blcc$O:	src/etc/lcc.c;	$(CC) $(CFLAGS) -c -DTEMPDIR=\"$(TEMPDIR)\" -Fo$@ src/etc/lcc.c
$Bhost$O:	$(HOSTFILE);	$(CC) $(CFLAGS) -c -Fo$@ $(HOSTFILE)

$Bcp$E:		src/etc/cp.c;	$(CC) $(CFLAGS) -Fo$@ src/etc/cp.c


#
#
#
LIBOBJS=$Bassert$O $Bbbexit$O $Byynull$O

$Bliblcc$A:	$(LIBOBJS);	lib -out:$@ $Bassert$O $Bbbexit$O $Byynull$O

$Bassert$O:	src/lib/assert.c;	$(CC) -c -Fo$@ src/lib/assert.c
$Byynull$O:	src/lib/yynull.c;	$(CC) -c -Fo$@ src/lib/yynull.c
$Bbbexit$O:	src/lib/bbexit.c;	$(CC) -c -Fo$@ src/lib/bbexit.c

$Blburg$E:	$Blburg$O $Bgram$O;	$(LD) $(LDFLAGS) -Fe$@ $Blburg$O $Bgram$O 

$Blburg$O $Bgram$O:	src/lburg/lburg.h

$Blburg$O:	src/lburg/lburg.c;	$(CC) $(CFLAGS) -c -Isrc/lburg -Fo$@ src/lburg/lburg.c
$Bgram$O:	src/lburg/gram.c;	$(CC) $(CFLAGS) -c -Isrc/lburg -Fo$@ src/lburg/gram.c

#
#
#
CPPOBJS=$Bcpp$O $Blexer$O $Bnlist$O $Btokens$O $Bmacro$O $Beval$O \
	$Binclude$O $Bhideset$O $Bgetopt$O $Bunix$O

$Bcpp$E:	$(CPPOBJS)
		$(LD) $(LDFLAGS) -Fe$@ $(CPPOBJS) 

$(CPPOBJS):	src/cpp/cpp.h

$Bcpp$O:	src/cpp/cpp.c;	$(CC) $(CFLAGS) -c -Isrc/cpp -Fo$@ src/cpp/cpp.c
$Blexer$O:	src/cpp/lex.c;	$(CC) $(CFLAGS) -c -Isrc/cpp -Fo$@ src/cpp/lex.c
$Bnlist$O:	src/cpp/nlist.c;	$(CC) $(CFLAGS) -c -Isrc/cpp -Fo$@ src/cpp/nlist.c
$Btokens$O:	src/cpp/tokens.c;	$(CC) $(CFLAGS) -c -Isrc/cpp -Fo$@ src/cpp/tokens.c
$Bmacro$O:	src/cpp/macro.c;	$(CC) $(CFLAGS) -c -Isrc/cpp -Fo$@ src/cpp/macro.c
$Beval$O:	src/cpp/eval.c;	$(CC) $(CFLAGS) -c -Isrc/cpp -Fo$@ src/cpp/eval.c
$Binclude$O:	src/cpp/include.c;	$(CC) $(CFLAGS) -c -Isrc/cpp -Fo$@ src/cpp/include.c
$Bhideset$O:	src/cpp/hideset.c;	$(CC) $(CFLAGS) -c -Isrc/cpp -Fo$@ src/cpp/hideset.c
$Bgetopt$O:	src/cpp/getopt.c;	$(CC) $(CFLAGS) -c -Isrc/cpp -Fo$@ src/cpp/getopt.c
$Bunix$O:	src/cpp/unix.c;	$(CC) $(CFLAGS) -c -Isrc/cpp -Fo$@ src/cpp/unix.c

#
# test targets 
#
#   FIXME : should be able to do this with a common rule
#
#   TODO  : add separate test_cross target that skips the run steps
#
test:	$T8q.s \
	$Tarray.s \
	$Tcf.s \
	$Tcq.s \
	$Tcvt.s \
	$Tfields.s \
	$Tfront.s \
	$Tincr.s \
	$Tinit.s \
	$Tlimits.s \
	$Tparanoia.s \
	$Tsort.s \
	$Tspill.s \
	$Tstdarg.s \
	$Tstruct.s \
	$Tswitch.s \
	$Twf1.s \
	$Tyacc.s

$T8q.s:	tst\8q.c tst\8q.0 all
	-$C -S -Wf-errout=$T8q.2 -o $T8q.s tst/8q.c
	fc $(TARGET)\tst\8q.sbk $T8q.s
	fc $(TARGET)\tst\8q.2bk $T8q.2
#	$C -o $T8q$E $T8q.s
#	-$T8q$E <tst/8q.0 >$T8q.1
#	fc $(TARGET)\tst\8q.1bk $T8q.1

$Tarray.s:	tst\array.c tst\array.0 all
	-$C -S -Wf-errout=$Tarray.2 -o $Tarray.s tst/array.c
	fc $(TARGET)\tst\array.sbk $Tarray.s
	fc $(TARGET)\tst\array.2bk $Tarray.2
#	$C -o $Tarray$E $Tarray.s
#	-$Tarray$E <tst/array.0 >$Tarray.1
#	fc $(TARGET)\tst\array.1bk $Tarray.1

$Tcf.s:	tst\cf.c tst\cf.0 all
	-$C -S -Wf-errout=$Tcf.2 -o $Tcf.s tst/cf.c
	fc $(TARGET)\tst\cf.sbk $Tcf.s
	fc $(TARGET)\tst\cf.2bk $Tcf.2
#	$C -o $Tcf$E $Tcf.s
#	-$Tcf$E <tst/cf.0 >$Tcf.1
#	fc $(TARGET)\tst\cf.1bk $Tcf.1

$Tcq.s:	tst\cq.c tst\cq.0 all
	-$C -S -Wf-errout=$Tcq.2 -o $Tcq.s tst/cq.c
	fc $(TARGET)\tst\cq.sbk $Tcq.s
	fc $(TARGET)\tst\cq.2bk $Tcq.2
#	$C -o $Tcq$E $Tcq.s
#	-$Tcq$E <tst/cq.0 >$Tcq.1
#	fc $(TARGET)\tst\cq.1bk $Tcq.1

$Tcvt.s:	tst\cvt.c tst\cvt.0 all
	-$C -S -Wf-errout=$Tcvt.2 -o $Tcvt.s tst/cvt.c
	fc $(TARGET)\tst\cvt.sbk $Tcvt.s
	fc $(TARGET)\tst\cvt.2bk $Tcvt.2
#	$C -o $Tcvt$E $Tcvt.s
#	-$Tcvt$E <tst/cvt.0 >$Tcvt.1
#	fc $(TARGET)\tst\cvt.1bk $Tcvt.1

$Tfields.s:	tst\fields.c tst\fields.0 all
	-$C -S -Wf-errout=$Tfields.2 -o $Tfields.s tst/fields.c
	fc $(TARGET)\tst\fields.sbk $Tfields.s
	fc $(TARGET)\tst\fields.2bk $Tfields.2
#	$C -o $Tfields$E $Tfields.s
#	-$Tfields$E <tst/fields.0 >$Tfields.1
#	fc $(TARGET)\tst\fields.1bk $Tfields.1

$Tfront.s:	tst\front.c tst\front.0 all
	-$C -S -Wf-errout=$Tfront.2 -o $Tfront.s tst/front.c
	fc $(TARGET)\tst\front.sbk $Tfront.s
	fc $(TARGET)\tst\front.2bk $Tfront.2

$Tincr.s:	tst\incr.c tst\incr.0 all
	-$C -S -Wf-errout=$Tincr.2 -o $Tincr.s tst/incr.c
	fc $(TARGET)\tst\incr.sbk $Tincr.s
	fc $(TARGET)\tst\incr.2bk $Tincr.2
#	$C -o $Tincr$E $Tincr.s
#	-$Tincr$E <tst/incr.0 >$Tincr.1
#	fc $(TARGET)\tst\incr.1bk $Tincr.1

$Tinit.s:	tst\init.c tst\init.0 all
	-$C -S -Wf-errout=$Tinit.2 -o $Tinit.s tst/init.c
	fc $(TARGET)\tst\init.sbk $Tinit.s
	fc $(TARGET)\tst\init.2bk $Tinit.2
#	$C -o $Tinit$E $Tinit.s
#	-$Tinit$E <tst/init.0 >$Tinit.1
#	fc $(TARGET)\tst\init.1bk $Tinit.1

$Tlimits.s:	tst\limits.c tst\limits.0 all
	-$C -S -Wf-errout=$Tlimits.2 -o $Tlimits.s tst/limits.c
	fc $(TARGET)\tst\limits.sbk $Tlimits.s
	fc $(TARGET)\tst\limits.2bk $Tlimits.2
#	$C -o $Tlimits$E $Tlimits.s
#	-$Tlimits$E <tst/limits.0 >$Tlimits.1
#	fc $(TARGET)\tst\limits.1bk $Tlimits.1

$Tparanoia.s:	tst\paranoia.c tst\paranoia.0 all
	-$C -S -Wf-errout=$Tparanoia.2 -o $Tparanoia.s tst/paranoia.c
	fc $(TARGET)\tst\paranoia.sbk $Tparanoia.s
	fc $(TARGET)\tst\paranoia.2bk $Tparanoia.2
#	$C -o $Tparanoia$E $Tparanoia.s
#	-$Tparanoia$E <tst/paranoia.0 >$Tparanoia.1
#	fc $(TARGET)\tst\paranoia.1bk $Tparanoia.1

$Tsort.s:	tst\sort.c tst\sort.0 all
	-$C -S -Wf-errout=$Tsort.2 -o $Tsort.s tst/sort.c
	fc $(TARGET)\tst\sort.sbk $Tsort.s
	fc $(TARGET)\tst\sort.2bk $Tsort.2
#	$C -o $Tsort$E $Tsort.s
#	-$Tsort$E <tst/sort.0 >$Tsort.1
#	fc $(TARGET)\tst\sort.1bk $Tsort.1

$Tspill.s:	tst\spill.c tst\spill.0 all
	-$C -S -Wf-errout=$Tspill.2 -o $Tspill.s tst/spill.c
	fc $(TARGET)\tst\spill.sbk $Tspill.s
	fc $(TARGET)\tst\spill.2bk $Tspill.2
#	$C -o $Tspill$E $Tspill.s
#	-$Tspill$E <tst/spill.0 >$Tspill.1
#	fc $(TARGET)\tst\spill.1bk $Tspill.1

$Tstdarg.s:	tst\stdarg.c tst\stdarg.0 all
	-$C -S -Wf-errout=$Tstdarg.2 -o $Tstdarg.s tst/stdarg.c
	fc $(TARGET)\tst\stdarg.sbk $Tstdarg.s
	fc $(TARGET)\tst\stdarg.2bk $Tstdarg.2
#	$C -o $Tstdarg$E $Tstdarg.s
#	-$Tstdarg$E <tst/stdarg.0 >$Tstdarg.1
#	fc $(TARGET)\tst\stdarg.1bk $Tstdarg.1

$Tstruct.s:	tst\struct.c tst\struct.0 all
	-$C -S -Wf-errout=$Tstruct.2 -o $Tstruct.s tst/struct.c
	fc $(TARGET)\tst\struct.sbk $Tstruct.s
	fc $(TARGET)\tst\struct.2bk $Tstruct.2
#	$C -o $Tstruct$E $Tstruct.s
#	-$Tstruct$E <tst/struct.0 >$Tstruct.1
#	fc $(TARGET)\tst\struct.1bk $Tstruct.1

$Tswitch.s:	tst\switch.c tst\switch.0 all
	-$C -S -Wf-errout=$Tswitch.2 -o $Tswitch.s tst/switch.c
	fc $(TARGET)\tst\switch.sbk $Tswitch.s
	fc $(TARGET)\tst\switch.2bk $Tswitch.2
#	$C -o $Tswitch$E $Tswitch.s
#	-$Tswitch$E <tst/switch.0 >$Tswitch.1
#	fc $(TARGET)\tst\switch.1bk $Tswitch.1

$Twf1.s:	tst\wf1.c tst\wf1.0 all
	-$C -S -Wf-errout=$Twf1.2 -o $Twf1.s tst/wf1.c
	fc $(TARGET)\tst\wf1.sbk $Twf1.s
	fc $(TARGET)\tst\wf1.2bk $Twf1.2
#	$C -o $Twf1$E $Twf1.s
#	-$Twf1$E <tst/wf1.0 >$Twf1.1
#	fc $(TARGET)\tst\wf1.1bk $Twf1.1

$Tyacc.s:	tst\yacc.c tst\yacc.0 all
	-$C -S -Wf-errout=$Tyacc.2 -o $Tyacc.s tst/yacc.c
	fc $(TARGET)\tst\yacc.sbk $Tyacc.s
	fc $(TARGET)\tst\yacc.2bk $Tyacc.2
#	$C -o $Tyacc$E $Tyacc.s
#	-$Tyacc$E <tst/yacc.0 >$Tyacc.1
#	fc $(TARGET)\tst\yacc.1bk $Tyacc.1

testclean:
	-del /q $T8q$E $T8q.s $T8q.2 $T8q.1
	-del /q $Tarray$E $Tarray.s $Tarray.2 $Tarray.1
	-del /q $Tcf$E $Tcf.s $Tcf.2 $Tcf.1
	-del /q $Tcq$E $Tcq.s $Tcq.2 $Tcq.1
	-del /q $Tcvt$E $Tcvt.s $Tcvt.2 $Tcvt.1
	-del /q $Tfields$E $Tfields.s $Tfields.2 $Tfields.1
	-del /q $Tfront$E $Tfront.s $Tfront.2 $Tfront.1
	-del /q $Tincr$E $Tincr.s $Tincr.2 $Tincr.1
	-del /q $Tinit$E $Tinit.s $Tinit.2 $Tinit.1
	-del /q $Tlimits$E $Tlimits.s $Tlimits.2 $Tlimits.1
	-del /q $Tparanoia$E $Tparanoia.s $Tparanoia.2 $Tparanoia.1
	-del /q $Tsort$E $Tsort.s $Tsort.2 $Tsort.1
	-del /q $Tspill$E $Tspill.s $Tspill.2 $Tspill.1
	-del /q $Tstdarg$E $Tstdarg.s $Tstdarg.2 $Tstdarg.1
	-del /q $Tstruct$E $Tstruct.s $Tstruct.2 $Tstruct.1
	-del /q $Tswitch$E $Tswitch.s $Tswitch.2 $Tswitch.1
	-del /q $Twf1$E $Twf1.s $Twf1.2 $Twf1.1
	-del /q $Tyacc$E $Tyacc.s $Tyacc.2 $Tyacc.1

clean::		testclean
		-del /q $B*$O
		-del /q $Bdagcheck.c $Balpha.c $Barm.c $Bmips.c $Bx86.c $Bsparc.c $Byard.c $Bx86linux.c
		-del /q $Brcc1$E $Brcc1$E $B1rcc$E $B2rcc$E
		-del /q $B*.ilk

clobber::	clean
		-del /q $Brcc$E $Blburg$E $Bcpp$E $Blcc$E $Bcp$E $Bbprint$E $Bops$E $B*$A
		-del /q $B*.pdb $B*.pch

RCCSRCS=src/rcc/alloc.c \
	src/rcc/bind.c \
	src/rcc/dag.c \
	src/rcc/decl.c \
	src/rcc/enode.c \
	src/rcc/error.c \
	src/rcc/expr.c \
	src/rcc/event.c \
	src/rcc/init.c \
	src/rcc/inits.c \
	src/rcc/input.c \
	src/rcc/lex.c \
	src/rcc/list.c \
	src/rcc/main.c \
	src/rcc/output.c \
	src/rcc/prof.c \
	src/rcc/profio.c \
	src/rcc/simp.c \
	src/rcc/stmt.c \
	src/rcc/string.c \
	src/rcc/sym.c \
	src/rcc/trace.c \
	src/rcc/tree.c \
	src/rcc/types.c \
	src/rcc/null.c \
	targets/symbolic/src/symbolic.c \
	src/rcc/bytecode.c \
	src/rcc/gen.c \
	src/rcc/stab.c \
	$Bdagcheck.c \
	$Balpha.c \
	$Barm.c \
	$Bmips.c \
	$Bsparc.c \
	$Byard.c \
	$Bx86linux.c \
	$Bx86.c

C=$Blcc -A -d0.6 -Wo-lccdir=$(LCCBUILDDIR) -Isrc/rcc -I$(LCCBUILDDIR)
triple:	$B2rcc$E
	-fc /b $B1rcc$E $B2rcc$E

$B1rcc$E:	$Brcc$E $Blcc$E $Bcpp$E
		$C -o $@ -B$B $(RCCSRCS)
$B2rcc$E:	$B1rcc$E
		$C -o $@ -B$B1 $(RCCSRCS)
